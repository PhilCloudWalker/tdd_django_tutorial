# Python Django
# Test a Django project on multiple versions of Python.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- main

pool:
  vmImage: ubuntu-latest

stages: 
- stage: Build
  jobs:
  - job: UnittestAndCopy
    steps: 
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.7'
        architecture: 'x64'

    - task: PythonScript@0
      displayName: 'Export project path'
      inputs:
        scriptSource: 'inline'
        script: |
          """Search all subdirectories for `manage.py`."""
          from glob import iglob
          from os import path
          # Python >= 3.5
          manage_py = next(iglob(path.join('**', 'manage.py'), recursive=True), None)
          if not manage_py:
              raise SystemExit('Could not find a Django project')
          project_location = path.dirname(path.abspath(manage_py))
          print('Found Django project in', project_location)
          print('##vso[task.setvariable variable=projectRoot]{}'.format(project_location))

    - script: |
        python -m pip install --upgrade pip setuptools wheel
        pip install -r requirements.txt
        pip install unittest-xml-reporting
      displayName: 'Install prerequisites'
  
    - script: |
        pushd '$(projectRoot)'
        python manage.py test lists --testrunner xmlrunner.extra.djangotestrunner.XMLTestRunner --no-input
      displayName: 'Run tests'

    - task: PublishTestResults@2
      inputs:
        testResultsFiles: "**/TEST-*.xml"
        testRunTitle: 'Python $(PYTHON_VERSION)'
      condition: succeededOrFailed()

    - task: CopyFiles@2
      displayName: 'Copy Files to artifact staging directory'
      inputs:
        SourceFolder: '$(System.DefaultWorkingDirectory)'
        Contents: '**'
        TargetFolder: $(Build.ArtifactStagingDirectory)
    - upload: $(Build.ArtifactStagingDirectory)
      artifact: superlists

- stage: Deploy
  jobs:
  - deployment: VMDeploy
    displayName: web
    pool:
      vmImage: 'ubuntu-latest'
    environment:
      name: ottg-vm
      resourceType: VirtualMachine
    strategy:
      runOnce:
        deploy:
          steps:
          - task: Bash@3
            inputs:
              targetType: 'inline'
              # Code workes but terminal need to stay open, otherwise django stopped --> hence deploy not finished ;)
              script: |
                # Modify deployment script based on the app type
                echo "Starting deployment script run"
                cd ~
                pwd
                python -V
                echo Delete old folder
                rm django_code -r -f
                mkdir django_code
                cp '$(Pipeline.Workspace)/superlists' django_code -r
                cd django_code/superlists
                echo Install packages
                python3.7 -m venv virtualenv
                source virtualenv/bin/activate
                pip install -r requirements.txt
                echo Migrate Database
                pwd
                python3.7 manage.py migrate
                echo Run Django app
                pwd
                echo ---- Done----
                